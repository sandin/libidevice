//------------------------------------------------
//--- 010 Editor v5.0.2 Binary Template
//
//      File: DTXMessage.bt
//   Authors: lds
//   Version: 0.0.1
//   Purpose: Define a template for parsing
//            DTXMessage binary files.
//  Category: Operating System
// File Mask: DTXMessage.bin
//------------------------------------------------

typedef struct {
    uint32 magic <fgcolor=cBlack, bgcolor=cYellow>;
    uint32 message_header_size;
    uint16 fragment_index;
    uint16 fragment_count;
    uint32 length;
    uint32 identifier;
    uint32 conversation_index;
    uint32 channel_code;
    uint32 expects_reply;
} DTXMessageHeader;

typedef struct {
    uint32 message_type;
    uint32 auxiliary_length;
    uint64 total_length;
} DTXMessagePayloadHeader;

typedef struct {
    uint64 capacity;
    uint64 size;
} DTXPrimitiveArrayHeader;


void EatAll() {
    FSeek(FileSize());
}

int ParseDTXMessage() {    
    struct DTXMessage {
        local uint64 msg_start = FTell();
        DTXMessageHeader header;
        if (header.magic != 0x1F3D5B79 || header.message_header_size != 0x20) {
            Printf("bad DTXMessage magic=%d, pos=0x%X\n", header.magic, msg_start); 
            EatAll();
            return -1;
        }
    
        remain = FileSize() - FTell();
        if (remain < header.length) {
            Printf("not enough bytes to read a message, need=%d, actual=%d, pos=0x%X\n", header.length, remain, msg_start); 
            EatAll();
            return -1;
        }

        if (header.fragment_count == 1) {
            DTXMessagePayloadHeader payloadHeader;
            local int64 payload_length = payloadHeader.total_length - payloadHeader.auxiliary_length;
            if (payloadHeader.auxiliary_length > 0) {
                DTXPrimitiveArrayHeader primitiveArrayHeader;
                local int64 auxiliary_end = FTell() + primitiveArrayHeader.size;
                while(FTell() < auxiliary_end) {
                    struct {
                       uint32 type;
                        Printf("type=%d\n", type);
                        switch (type) {
                            case 1:
                            case 2:
                                struct {
                                    uint32 len;
                                    byte bytes[len];
                                } value;
                                break;
                            case 3:
                                struct {
                                    int32 val;
                                } value;
                                break;
                            case 4:
                            case 9:
                                struct {
                                    int64 val;
                                } value;
                                break;
                            case 5:
                                struct {
                                    float val;
                                } value;
                                break;
                            case 6:
                                struct {
                                    double val;
                                } value;
                                break;
                            case 10:
                            default:
                                break;
                            }
                    } auxiliary;
                } // end while
            } // end if 
            if (payload_length > 0) {
                byte payload[payload_length];
            }
  
        } else {
            Printf("header.fragment_index=%d, fragment_count=%d\n", header.fragment_index, header.fragment_count); 
            if (header.fragment_index == 0) {
                // the first fragment only contains the DTXMessageHeader
            } else {
                Printf("fragment payload offset: 0x%x\n", FTell());
                byte payload[header.length];
            }
            // TODO
        }
        
    } msg;
    return 0;
}


LittleEndian();
local uint64 remain;
local int ret;

while (!FEof()) {
    remain = FileSize() - FTell();
    if (remain < 0x20) {
        break;
    }

    ret = ParseDTXMessage();
    if (ret != 0) {
        break;
    }
} // end of while EOF